
/*! \page docstrings Autogenerated Documentation and Docstrings

The reposit SWIG module is capable of autogenerating end-user documentation
for the functions in your addin.  By default this documentation lists only
function and parameter names.  You can provide documentation strings by adding
Doxygen-style comments either to the header file that you are wrapping or to
the SWIG interface files.  The only docstrings that are recognized by reposit
are briefdoc-style strings for functions and parameters.

The reposit project includes a utility, a Python 2.7 script called
docstrings.py, which extracts the docstrings from your header files and SWIG
interface files, and writes them to a file called docstrings.txt.  The reposit
SWIG module loads docstrings.txt and inserts the docstrings into the
appropriate place when autgenerating the documentation.  For the Excel addin,
the docstrings also appear in the Excel Function Wizard.

All of the above functionality is optional.  You configure it in the \%module
directive of your root SWIG interface file.

\code
%module(
    ...
    rp_dox_dir="../Docs/pages_auto"
    rp_doc_str="../docstrings/docstrings.txt",
) ComplexLibAddin
\endcode

rp_dox_dir specifies the target directory for the autogenerated
documentation.  If no path is specified then the documentation is not
generated.  The documentation is in the form of input files which must be fed
to doxygen to generate html.

By default the autogenerated documentation includes only function and
argument names, no docstrings.  If you want to include docstrings, set
rp_doc_str equal to the relative path to the docstrings.txt file which was
generated by docstrings.py.  Refer to the ComplexLib example project for a
Makefile to run docstrings.py.

If you set rp_dox_dir, you will need to have doxygen installed in order to
process the files generated in that directory.  If you set rp_doc_str, you will
need both doxygen and Python 2.7 in order to generate the docstrings.txt file.
Both features are optional and can be excluded from your project without
affecting anything else.

Suppose that the C++ header files that you are wrapping have already been
documented with doxygen briefdoc-style comments.  The example file
docstrings.hpp shows how this would look.

\code
    // class Doc1 and function docFunc1 are documented

    // with Doxygen style comments.
    class Doc1 {
    public:
        //! Construct an object of type Doc1
        Doc1() {}
        //! Add two numbers together
        long sum(
            long a,  //!&lt; The first number to be summed
            long b   //!&lt; The second number to be summed
        ) const;
    };

    //! Echo input string to stdout
    void docFunc1(
        const std::string &amp;s    //!&lt; The string to be echoed
    );
\endcode

Suppose that the header file that you are wrapping has not been commented, or that you want to override the comments.
File docstrings.i shows how this would look.

\code
    // class Doc2 and function docFunc2 are not commented
    // in file docstrings.hpp so we comment them here.
    class Doc2 {
    public:
        //! Construct an object of type Doc1
        Doc2() {}
        //! Add two numbers together
        long sum(
            long a,  //!&lt; The first number to be summed
            long b   //!&lt; The second number to be summed
        ) const;
    };

    //! Echo input string to stdout
    void docFunc2(
        const std::string &amp;s    //!&lt; The string to be echoed
    );
\endcode

The ComplexLibAddin example project shows all of the above in action and provides an example of the
final output, the end user function level documentation in html.

*/

